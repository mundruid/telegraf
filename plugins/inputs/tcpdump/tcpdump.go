package tcpdump

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/influxdata/telegraf"
	"github.com/influxdata/telegraf/plugins/inputs"
)

const data = ``

type Tcpdump struct {
	Field string
	Tag   string
}

var TcpdumpConfig = `
    ## Set the filter
    field = "ip.len"
    tag = "ip.src"
`

func (s *Tcpdump) SampleConfig() string {
	return TcpdumpConfig
}

func (s *Tcpdump) Description() string {
	return "Filters tcpdump keys from a JSON formatted file generated by tshark and generates tags to use in select filters and fields to use in calculations"
}

func (s *Tcpdump) Gather(acc telegraf.Accumulator) error {
	//read file
	cdw, err := os.Getwd()
	if err != nil {
		panic(err)
	}

	readFile, err := os.Open(cdw + "/plugins/inputs/tcpdump/tshark.json")

	if err != nil {
		log.Fatalf("failed to open file: %s", err)
	}

	fileScanner := bufio.NewScanner(readFile)
	fileScanner.Split(bufio.ScanLines)
	var fileTextLines []string

	for fileScanner.Scan() {
		fileTextLines = append(fileTextLines, fileScanner.Text())
	}

	tags := make(map[string]string)
	fields := make(map[string]interface{})
	for _, line := range fileTextLines {

		if strings.Contains(line, s.Tag) {
			// add tags
			fmt.Printf("Found tag %s\n", line)
			key_value := strings.Split(line, ": ")
			fmt.Printf("key_value %s\n", key_value)
			value := strings.ReplaceAll(key_value[1], " ", "")
			fmt.Printf("value %s\n", value)
			tags[s.Tag] = value
		}

		if strings.Contains(line, s.Field) {
			// add fields
			fmt.Printf("Found field %s\n", line)
			key_value := strings.Split(line, ": ")
			fmt.Printf("key_value %s\n", key_value)
			value := strings.ReplaceAll(key_value[1], " ", "")
			fmt.Printf("value %s\n", value)
			fields[s.Field] = strings.ReplaceAll(value, `"`, "")
		}

		if strings.Contains(line, "Timestamps") { // end of packet
			fmt.Printf("tcpdump %s %s", fields[s.Field], tags[s.Tag])
			acc.AddFields("tcpdump", fields, tags)
		}
	}

	readFile.Close()
	return nil
}

func init() {
	inputs.Add("tcpdump", func() telegraf.Input { return &Tcpdump{Field: ""} })
}
