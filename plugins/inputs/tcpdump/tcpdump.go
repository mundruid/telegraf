package tcpdump

import (
	"encoding/json"
	"fmt"
	"github.com/tidwall/gjson"
	"os"

	"github.com/influxdata/telegraf"
	"github.com/influxdata/telegraf/plugins/inputs"
)

const data = ``

type Tcpdump struct {
	Field string
	Tag   string
}

var TcpdumpConfig = `
    ## Set the filter
    field = "ip.len"
    tag = "ip.src"
`

func (s *Tcpdump) SampleConfig() string {
	return TcpdumpConfig
}

func (s *Tcpdump) Description() string {
	return "Filters tcpdump keys from a JSON formatted file generated by tshark and generates tags to use in select filters and fields to use in calculations"
}

func (s *Tcpdump) Gather(acc telegraf.Accumulator) error {
	//read file
	cdw, err := os.Getwd()
	if err != nil {
		panic(err)
	}
	f, err := os.ReadFile(cdw + "/plugins/inputs/tcpdump/tshark_multilevel.json")
	if err != nil {
		panic(err)
	}

	// Unmarshall nested dictionary based on structure of field and tag
	// static version
	type data struct {
		Key1 string `json:"ip.len"`
		Key2 string `json:"ip.src"`
	}
	structdata := new(data)
	// dynamic version does not work
	// type data struct {
	// 	Key1 string
	// 	Key2 string
	// }
	// structdata := data{
	// 	Key1: `json:"` + s.Field + `"`,
	// 	Key2: `json:"` + s.Tag + `"`,
	// }
	if err := json.Unmarshal([]byte(string(f)), structdata); err != nil {
		panic(err)
	}

	// add default telegraf tags
	tags := make(map[string]string)
	tags[s.Tag] = structdata.Key2

	// add fields
	fields := make(map[string]interface{})
	fields[s.Field] = structdata.Key1

	fmt.Printf("tcpdump %s %s", fields[s.Field], tags[s.Tag])
	acc.AddFields("tcpdump", fields, tags)
	return nil
}

func init() {
	inputs.Add("tcpdump", func() telegraf.Input { return &Tcpdump{Field: ""} })
}
